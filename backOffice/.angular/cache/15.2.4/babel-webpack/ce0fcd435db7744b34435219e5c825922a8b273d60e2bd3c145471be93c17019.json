{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(http) {\n    this.http = http;\n    this.myAppUrl = environment.endpoint;\n  }\n  getListUsers() {\n    const myApiUrl = 'user/all';\n    return this.http.get(`${this.myAppUrl}${myApiUrl}`);\n  }\n  deleteUser(id) {\n    const myApiUrl = 'user/';\n    return this.http.delete(`${this.myAppUrl}${myApiUrl}${id}`);\n  }\n  /*crateUser(user: User): Observable<User> {\n    const myApiUrl: string = 'user/'\n    return this.http.post<User>(`${this.myAppUrl}${myApiUrl}`, user);\n  }*/\n  crateUser(user) {\n    const myApiUrl = 'auth/register';\n    return this.http.post(`${this.myAppUrl}${myApiUrl}`, user);\n  }\n  getUser(id) {\n    const myApiUrl = 'user/';\n    return this.http.get(`${this.myAppUrl}${myApiUrl}${id}`);\n  }\n  updateUser(id, user) {\n    const myApiUrl = 'user/';\n    return this.http.put(`${this.myAppUrl}${myApiUrl}${id}`, user);\n  }\n  login(name, password) {\n    const myApiUrl = 'auth/login';\n    return this.http.post(`${this.myAppUrl}${myApiUrl}`, {\n      \"name\": `${name}`,\n      \"password\": `${password}`\n    });\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;;;AAQ1D,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,QAAQ,GAAGJ,WAAW,CAACK,QAAQ;EAGtC;EAEAC,YAAY;IACV,MAAMC,QAAQ,GAAW,UAAU;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,QAAQ,GAAGG,QAAQ,EAAE,CAAC;EAC7D;EAEAE,UAAU,CAACC,EAAM;IACf,MAAMH,QAAQ,GAAW,OAAO;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACQ,MAAM,CAAO,GAAG,IAAI,CAACP,QAAQ,GAAGG,QAAQ,GAAGG,EAAE,EAAE,CAAC;EAEnE;EAEA;;;;EAKAE,SAAS,CAACC,IAAU;IAClB,MAAMN,QAAQ,GAAW,eAAe;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACW,IAAI,CAAO,GAAG,IAAI,CAACV,QAAQ,GAAGG,QAAQ,EAAE,EAAEM,IAAI,CAAC;EAClE;EAEAE,OAAO,CAACL,EAAU;IAChB,MAAMH,QAAQ,GAAW,OAAO;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAO,GAAG,IAAI,CAACJ,QAAQ,GAAGG,QAAQ,GAAGG,EAAE,EAAE,CAAC;EAChE;EAEAM,UAAU,CAACN,EAAU,EAAEG,IAAU;IAC/B,MAAMN,QAAQ,GAAW,OAAO;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACc,GAAG,CAAO,GAAG,IAAI,CAACb,QAAQ,GAAGG,QAAQ,GAAGG,EAAE,EAAE,EAAEG,IAAI,CAAC;EACtE;EAEAK,KAAK,CAACC,IAAY,EAAEC,QAAgB;IAClC,MAAMb,QAAQ,GAAW,YAAY;IACrC,OAAO,IAAI,CAACJ,IAAI,CAACW,IAAI,CAAM,GAAG,IAAI,CAACV,QAAQ,GAAGG,QAAQ,EAAE,EAAE;MACxD,MAAM,EAAC,GAAGY,IAAI,EAAE;MAChB,UAAU,EAAC,GAAGC,QAAQ;KACzB,CAAC;EACF;;AA/CWnB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAoB,SAAZpB,YAAY;EAAAqB,YAFX;AAAM","names":["environment","UsersService","constructor","http","myAppUrl","endpoint","getListUsers","myApiUrl","get","deleteUser","id","delete","crateUser","user","post","getUser","updateUser","put","login","name","password","factory","providedIn"],"sourceRoot":"","sources":["/Users/victoriaromangarrido/Desktop/Uni/3B-Q2/EA/Projecte/BackOfficeEA/backOffice/src/app/services/users.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { ID, User } from '../interfaces/user';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  \n  private myAppUrl: string;\n\n  constructor(private http: HttpClient) {\n    this.myAppUrl = environment.endpoint;\n\n    \n  }\n\n  getListUsers(): Observable<User[]> {\n    const myApiUrl: string = 'user/all'\n    return this.http.get<User[]>(`${this.myAppUrl}${myApiUrl}`)\n  }\n\n  deleteUser(id: ID): Observable<void> {\n    const myApiUrl: string = 'user/'\n    return this.http.delete<void>(`${this.myAppUrl}${myApiUrl}${id}`)\n\n  }\n\n  /*crateUser(user: User): Observable<User> {\n    const myApiUrl: string = 'user/'\n    return this.http.post<User>(`${this.myAppUrl}${myApiUrl}`, user);\n  }*/\n\n  crateUser(user: User): Observable<User> {\n    const myApiUrl: string = 'auth/register'\n    return this.http.post<User>(`${this.myAppUrl}${myApiUrl}`, user);\n  }\n\n  getUser(id: string): Observable<User> {\n    const myApiUrl: string = 'user/';\n    return this.http.get<User>(`${this.myAppUrl}${myApiUrl}${id}`);\n  }\n\n  updateUser(id: string, user: User): Observable<User> {\n    const myApiUrl: string = 'user/';\n    return this.http.put<User>(`${this.myAppUrl}${myApiUrl}${id}`, user);\n  }\n\n  login(name: string, password: string): Observable<any> {\n    const myApiUrl: string = 'auth/login';\n    return this.http.post<any>(`${this.myAppUrl}${myApiUrl}`, {\n      \"name\":`${name}`,\n      \"password\":`${password}`\n  });\n  }\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}